'use strict';
import { Node } from '.';
import { instanceofINodeable } from '../nodeable';
export class ParameterNode extends Node {
    constructor(val) {
        super('PARAMETER');
        this.val = val;
        this.isExplicit = false;
    }
    // wrap a value as a parameter node if value is not already a node
    static getNodeOrParameterNode(value) {
        if (value && instanceofINodeable(value)) {
            // use toNode
            return value.toNode();
        }
        else {
            // wrap as parameter node
            return new ParameterNode(value);
        }
    }
    value() {
        return this.val;
    }
}
//# sourceMappingURL=parameter.js.map