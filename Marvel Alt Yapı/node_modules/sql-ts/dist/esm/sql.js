'use strict';
import defaults from 'lodash/defaults';
import sliced from 'sliced';
import { Column } from './column';
import { DEFAULT_DIALECT, getDialect } from './dialect';
import * as functions from './functions';
import { ArrayCallNode, RowCallNode, IntervalNode, LiteralNode, Query, ParameterNode } from './node';
import { Table } from './table';
export class Sql {
    constructor(dialect = DEFAULT_DIALECT, config = {}) {
        this.setDialect(dialect, config);
        // attach the standard SQL functions to this instance
        this.functions = functions.getStandardFunctions();
        this._function = functions.getFunctions;
    }
    function(...args) {
        return this._function(...args);
    }
    // Define a table
    define(def) {
        def = defaults(def || {}, {
            sql: this
        });
        return Table.define(def);
    }
    defineColumn(def) {
        return new Column(def);
    }
    // Returns a bracketed call creator literal
    array(...args) {
        const arrayCall = new ArrayCallNode(sliced(args));
        return arrayCall;
    }
    // Returns a bracketed call creator literal
    row(...args) {
        const rowCall = new RowCallNode(sliced(args));
        return rowCall;
    }
    // Returns a select statement
    select(...args) {
        const query = new Query({ sql: this });
        query.select(...args);
        return query;
    }
    // Returns an interval clause
    interval(...args) {
        const interval = new IntervalNode(sliced(args));
        return interval;
    }
    // Set the dialect
    setDialect(dialect, config = {}) {
        this.dialect = getDialect(dialect);
        this.dialectName = dialect;
        this.config = config;
        return this;
    }
    // Create a constant Column (for use in SELECT)
    constant(value) {
        const config = {
            constantValue: value,
            isConstant: true,
            name: 'constant',
            property: 'constant'
        };
        const cn = new Column(config);
        return cn;
    }
    // Create a literal
    literal(literal) {
        return new LiteralNode(literal);
    }
    // Create a parameter
    parameter(value) {
        return new ParameterNode(value);
    }
}
//# sourceMappingURL=sql.js.map