'use strict';
import extend from 'lodash/extend';
import { AliasNode, Node, valueExpressionMixin } from '.';
let valueExpressionMixed = false;
export class CaseNode extends Node {
    constructor(config) {
        super('CASE');
        this.whenList = config.whenList;
        this.thenList = config.thenList;
        this.else = config.else;
        // Delay mixin to runtime, when all nodes have been defined, and
        // mixin only once. ValueExpressionMixin has circular dependencies.
        if (!valueExpressionMixed) {
            valueExpressionMixed = true;
            extend(CaseNode.prototype, valueExpressionMixin());
        }
    }
}
extend(CaseNode.prototype, AliasNode.AliasMixin);
//# sourceMappingURL=case.js.map